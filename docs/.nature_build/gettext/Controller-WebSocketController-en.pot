# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, an-tao
# This file is distributed under the same license as the drogon package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: drogon \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-19 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/Controller-WebSocketController-en.rstd:3
msgid "Controller WebSocketController"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:7
msgid "WebSocketController"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:9
msgid "As the name implies, *WebSocketController* is used to process websocket logic. Websocket is a persistent HTTP-based connection scheme. At the beginning of the websocket, there is an HTTP format request and response exchange. After the websocket connection is established, all messages are transmitted on the websocket. The message is wrapped in a fixed format. There is no limit to the message content and the order in which messages are transmitted."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:11
msgid "The source file of the *WebSocketController* can be generated by the *drogon_ctl* tool. The command format is as follows:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:17
msgid "Suppose we want to implement a simple echo function through websocket, that is, the server simply sends back the message sent by the client. We can create the implementation class EchoWebsock of *WebSocketController* through *drogon_ctl*, as follows:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:23
msgid "The command will generate two files of EchoWebsock.h and EchoWebsock.cc,as follows:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:25
#: ../../source/Controller-WebSocketController-en.rstd:63
msgid "*EchoWebsock.h*"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:44
#: ../../source/Controller-WebSocketController-en.rstd:83
msgid "*EchoWebsock.cc*"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:61
msgid "After edited:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:101
msgid "First, in this example, the controller is registered to the */echo* path via the *WS_PATH_ADD* macro. The usage of the *WS_PATH_ADD* macro is similar to the macros of other controllers introduced earlier. One can also register the path with several Filters. Since websocket is handled separately in the framework, it can be repeated with the paths of the first two controllers（*HttpSimpleController* and *HttpApiController*） without affecting each other."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:103
msgid "Secondly, in the implementation of the three virtual functions in this example, only the handleNewMessage has the substance, but simply sends the received message back to the client through the send interface.Compile this controller into the framework, you can see the effect, please test it yourself."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:106
msgid "Note: Like the usual HTTP protocol, http websocket can be sniffed. If security is required, encryption should be provided by HTTPS. Of course, it is also possible for users to complete encryption and decryption on the server and client side, but HTTPS is more convenient. The underlying layer is handled by drogon, and users only need to care about business logic."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:108
msgid "The user-defined websocket controller class inherits from the drogon::WebSocketController class template. The template parameter is a subclass type. The user needs to implement the following three virtual functions to process the establishment, shutdown, and messages of the websocket:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:114
msgid "Easy to know:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:116
msgid "handleNewConnection is called after the websocket is established. req is the setup request sent by the client. At this time, the framework has returned the response. What users can do is to get some additional information through req, such as token. wsConn is a smart pointer to this websocket object, and the commonly used interface will be discussed later."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:117
msgid "handleNewMessage is called after the websocket receives the new message. The message is stored in the message variable. Note that the message is the message payload. The framework has finished the decapsulation and decoding of the message. The user can directly process the message itself."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:118
msgid "handleConnectionClosed is called after the websocket connection is closed, and the user can do some finishing work."
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:122
msgid "WebSocketConnection"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:124
msgid "The common interfaces of the WebSocketConnection object are as follows:"
msgstr ""

#: ../../source/Controller-WebSocketController-en.rstd:126
msgid "*WebSocketConnection.h*"
msgstr ""

