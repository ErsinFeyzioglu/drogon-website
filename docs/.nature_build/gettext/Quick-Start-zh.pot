# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, an-tao
# This file is distributed under the same license as the drogon package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: drogon \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-19 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/Quick-Start-zh.rstd:3
msgid "快速开始"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:7
msgid "静态网站"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:9
msgid "我们从一个最简单的例子开始，介绍drogon的使用，在这个例子中我们使用命令行工具*drogon_ctl*创建一个工程："
msgstr ""

#: ../../source/Quick-Start-zh.rstd:15
msgid "进入工程目录，可以看到如下文件:"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:29
msgid "文件夹的名字就反应了它的用途，用户可以把各类文件(如控制器、过滤器、视图等等)分别放入对应的文件夹，方便项目管理，请读者自行实验。关于drogon_ctl的详细使用，可参见 drogon_ctl。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:31
msgid "让我们看一下main.cc文件，内容如下："
msgstr ""

#: ../../source/Quick-Start-zh.rstd:33
msgid "*main.cpp*"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:47
msgid "然后构建项目:"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:55
msgid "编译完成后，运行目标程序 *./your_project_name*."
msgstr ""

#: ../../source/Quick-Start-zh.rstd:57
msgid "现在，我们在Http根目录添加一个最简单的静态文件index.html:"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:63
msgid "Http根目录默认值是*\"./\"*， 也就是webapp程序运行的当前路径， Http根目录也可在config.json配置文件中进行更改，可参见配置文件， 然后在地址栏输入*http://localhost*或*http://localhost/index.html*(或者你的webapp所在服务器的ip)可以访问到这个页面"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:66
msgid "Hello Drogon!"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:68
msgid "If server cannot find the the page you have requested, it return 404 page: 404 page"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:71
msgid "注意：请确认服务器的防火墙已经打开80端口，否则你看不到这些页面。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:73
msgid "我们可以把一个静态网站的目录和文件复制到这个webapp的运行目录，然后通过浏览器就可以访问到它们，drogon默认支持的文件类型有\"html\",\"js\",\"css\",\"xml\",\"xsl\",\"txt\",\"svg\",\"ttf\",\"otf\",\"woff2\",\"woff\",\"eot\",\"png\",\"jpg\",\"jpeg\",\"gif\",\"bmp\",\"ico\",\"icns\"等等，drogon也提供接口更改这些文件类型，具体请参考HttpAppFramework的API。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:77
msgid "动态网站"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:79
msgid "下面我们看看怎么给这个应用添加控制器（controller）,并使用控制器（controller）输出内容。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:81
msgid "在controller目录下运行drogon_ctl命令行工具生成控制器（controller）源文件:"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:87
msgid "可以看到，目录下新增加了两个文件，TestCtrl.h和TestCtrl.cc:"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:89
#: ../../source/Quick-Start-zh.rstd:122
msgid "TestCtrl.h如下："
msgstr ""

#: ../../source/Quick-Start-zh.rstd:91
#: ../../source/Quick-Start-zh.rstd:124
#: ../../source/Quick-Start-zh.rstd:147
msgid "*TestCtrl.h*"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:108
#: ../../source/Quick-Start-zh.rstd:145
msgid "TestCtrl.cc如下："
msgstr ""

#: ../../source/Quick-Start-zh.rstd:110
msgid "*TestCtrl.cc*"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:120
msgid "我们编辑一下这两个文件，让这个控制器处理函数回应一个简单的“Hello World!”。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:143
msgid "使用PATH_ADD添加路径到处理函数的映射，这里映射了两个路径'/'和'/test',并在路径后面添加了对这个路径的约束。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:162
msgid "重新用cmake编译这个工程，然后运行目标程序./your_project_name："
msgstr ""

#: ../../source/Quick-Start-zh.rstd:171
msgid "在浏览器地址栏输入*http://localhost/*或者*http://localhost/test*，你就可以在浏览器看到Hello World!了。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:174
msgid "注意: 同时存在静态和动态资源的情况下，框架优先使用控制器响应请求，此例中*http://localhost/* 响应的是TestCtrl控制器的输出Hello Word！而不是静态网页index.html的Hello Drogon！"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:176
msgid "我们看到，在应用中添加controller非常简单，只需要添加对应的源文件即可，甚至main文件不用做任何修改，这种低耦合度的设计对web应用开发是非常有效的。"
msgstr ""

#: ../../source/Quick-Start-zh.rstd:179
msgid "注意: Drogon没有限制控制器（controller）源文件的位置，也可以放在工程目录下，甚至可以在CMakeLists.txt中指定到新的目录中，为了方便管理，建议将控制器源文件放在controllers目录。"
msgstr ""

