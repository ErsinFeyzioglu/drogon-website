<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>数据库 事务</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="id1">
<h1>数据库 事务</h1>
<p><a href="#id2"><span class="problematic" id="id3">**</span></a>事务**是关系型数据库的重要特性，Drogon通过*Transaction*类提供了对事务的支持。</p>
<p><a href="#id4"><span class="problematic" id="id5">*</span></a>Transaction*类的对象由*DbClient*创建，事务有关的操作很多是自动进行的：</p>
<blockquote>
<div><p><a href="#id6"><span class="problematic" id="id7">*</span></a>Transaction*对象创建之初，自动执行了*begin*语句开始事务；
<a href="#id8"><span class="problematic" id="id9">*</span></a>Transaction*对象析构时，自动执行*commit*语句结束事务；
如果中间出现导致事务失败的异常，自动执行*rollback*语句回滚事务；
如果事务已经回滚，则之后的sql语句都会返回异常（抛异常或者执行异常回调）；</p>
</div></blockquote>
<div class="section" id="id10">
<h2>事务的创建</h2>
<p>事务创建接口由DbClient提供，如下：</p>
<div class="highlight-cpp notranslate"><div class="highlight"><pre><span></span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Transaction</span><span class="o">&gt;</span> <span class="n">newTransaction</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">commitCallback</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="o">&gt;</span><span class="p">())</span>
</pre></div>
</div>
<p>这个接口很简单，它返回一个*Transaction*对象的智能指针，显然，这个智能指针失去所有持有者而析构事务对象时，事务也就结束了。参数*commitCallback*用于返回事务提交是否成功，需要注意的是，这个回调只用来指示*commit*命令是否成功，如果，事务在执行过程中自动或手动回滚了，这个回调就不会执行了。通常，<a href="#id11"><span class="problematic" id="id12">*</span></a>commit*命令都会成功，这个回调的bool类型参数为true，只有某些特殊情况，比如*commit*执行过程中连接断了，才会导致*commitCallback*通知用户*commit*失败，这时，事务在服务端的状态是不确定的，用户需特殊处理，当然，考虑到这种情况极少发生，非关键业务也可以选择忽略这种事件，那么用户只需要在创建事务时忽略这个参数即可（默认的空回调会传入这个接口）。</p>
<p>事务要独占一个数据库连接，因此事务创建过程中，<a href="#id13"><span class="problematic" id="id14">*</span></a>DbClient*要从自己的连接池中选一个空闲连接交给事务对象管理，这就有一个问题，如果DbClient的所有连接都在执行sql或者其他事务，那么，这个接口会阻塞直到有空闲连接为止。</p>
<p>框架同时提供了一个异步接口创建事务，如下：</p>
<div class="highlight-cpp notranslate"><div class="highlight"><pre><span></span><span class="kt">void</span> <span class="nf">newTransactionAsync</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Transaction</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">callback</span><span class="p">);</span>
</pre></div>
</div>
<p>这个接口通过回调函数返回事务对象，不会阻塞当前线程，保证了应用的高并发，缺点是多了一次回调函数的嵌套。用户可根据实际情况自行选用。</p>
</div>
<div class="section" id="id15">
<h2>事务的接口</h2>
<p><a href="#id16"><span class="problematic" id="id17">*</span></a>Transaction*的接口和*DbClient*几乎完全一致，除了下面这两点区别：</p>
<blockquote>
<div><ul class="simple">
<li><p><a href="#id18"><span class="problematic" id="id19">*</span></a>Transaction*提供了*rollback()*接口，使用户可以在任何情况下回滚事务，比如并未有任何错误发生，只是业务逻辑要求回滚事务的情况，有时候事务已经自动回滚了，这时候再次调用rollback()接口，没有任何负作用，因此，显示的使用*rollback()*接口是个不错的策略，至少可以保证不会错误提交。</p></li>
<li><p>用户不能调用事务的*newTransaction()*接口，这是容易理解的，虽然数据库有子事务的概念，但目前框架并不支持。</p></li>
</ul>
</div></blockquote>
<p>事实上，<a href="#id20"><span class="problematic" id="id21">*</span></a>Transaction*被设计成*DbClient*的子类，也是为了保持这些接口的一致性，同时，也为后文*ORM*的使用创造了方便条件。</p>
<p>框架目前没有提供控制事务隔离等级的接口，也就是说，隔离等级就是当前数据库服务的默认等级。</p>
</div>
<div class="section" id="id22">
<h2>事务的生命周期</h2>
<p>事务对象的智能指针除了被用户持有外，当它有未执行的sql时，框架也会持有，所以不用担心在还有未执行sql的情况下事务对象被析构。另外，事务对象智能指针常常在它的某个接口的结果回调里被捕获并使用，这也是正常的使用方式，不要担心由此引发循环引用导致事务对象永远不会析构，框架会通过回调完毕后清空事务内部的回调函数对象来打破循环引用；</p>
</div>
<div class="section" id="id23">
<h2>一个例子</h2>
<p>举个最简单的例子，假设有一个任务表，用户从中选取一个未处理状态的任务，把它改成正在处理中的状态，为了防止并发的竞态条件，我们使用Transaction，程序如下：</p>
<div class="highlight-cpp notranslate"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="k">auto</span> <span class="n">transPtr</span> <span class="o">=</span> <span class="n">clientPtr</span><span class="o">-&gt;</span><span class="n">newTransaction</span><span class="p">();</span>
    <span class="n">transPtr</span><span class="o">-&gt;</span><span class="n">execSqlAsync</span><span class="p">(</span> <span class="s">&quot;select * from tasks where status=$1 for update order by time&quot;</span><span class="p">,</span>
                            <span class="s">&quot;none&quot;</span><span class="p">,</span>
                            <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">Result</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
                                <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
                                <span class="p">{</span>
                                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Got a task!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                                    <span class="o">*</span><span class="n">transPtr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;update tasks set status=$1 where task_id=$2&quot;</span>
                                            <span class="o">&lt;&lt;</span> <span class="s">&quot;handling&quot;</span>
                                            <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">&quot;task_id&quot;</span><span class="p">].</span><span class="n">as</span><span class="o">&lt;</span><span class="kt">int64_t</span><span class="o">&gt;</span><span class="p">()</span>
                                            <span class="o">&gt;&gt;</span> <span class="p">[](</span><span class="k">const</span> <span class="n">Result</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">)</span>
                                                <span class="p">{</span>
                                                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Updated!&quot;</span><span class="p">;</span>
                                                    <span class="p">...</span> <span class="k">do</span> <span class="n">something</span> <span class="n">about</span> <span class="n">the</span> <span class="n">task</span><span class="p">;</span>
                                                <span class="p">}</span>
                                            <span class="o">&gt;&gt;</span> <span class="p">[](</span><span class="k">const</span> <span class="n">DrogonDbException</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span>
                                                <span class="p">{</span>
                                                    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;err:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">base</span><span class="p">().</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">;</span>
                                                <span class="p">};</span>
                                <span class="p">}</span>
                                <span class="k">else</span>
                                <span class="p">{</span>
                                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;No new tasks found!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                                <span class="p">}</span>
                            <span class="p">},</span>
                            <span class="p">[](</span><span class="k">const</span> <span class="n">DrogonDbException</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
                                <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;err:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">base</span><span class="p">().</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">;</span>
                            <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</div>
<p>本例中使用select for update避免并发修改，update语句在select语句的结果回调中完成，进行了一次嵌套，最外层的大括号是为了限定transPtr的作用范围，使之在执行完sql后及时的销毁从而结束事务。</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>