{"parents": [{"link": "../index-en/", "title": "English documentation"}], "prev": {"link": "../AOP-Aspect-Oriented-Programming-en/", "title": "AOP Aspect Oriented Programming"}, "next": {"link": "../Coz-en/", "title": "Coz"}, "title": "Benchmarks", "meta": {}, "body": "<div class=\"section\" id=\"benchmarks\">\n<h1>Benchmarks<a class=\"headerlink\" href=\"#benchmarks\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>As a C++ Http application framework, performance should be one of the focus of attention. This section introduces Drogon\u2019s simple tests and achievements;</p>\n<div class=\"section\" id=\"test-environment\">\n<h2>Test environment<a class=\"headerlink\" href=\"#test-environment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><ul class=\"simple\">\n<li>The system is Linux CentOS 7.4;</li>\n<li>The device is a Dell server, the CPU is two Intel(R) Xeon(R) CPUs E5-2670 &#64; 2.60GHz, 16 cores and 32 threads;</li>\n<li>Memory 64GB;</li>\n<li>gcc version 7.3.0;</li>\n</ul>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"test-plan-and-results\">\n<h2>Test plan and results<a class=\"headerlink\" href=\"#test-plan-and-results\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We just want to test the performance of the drogon framework, so we want to simplify the controller\u2019s processing as much as possible. We only do an HttpSimpleController and register it on the <em>/benchmark</em> path. The controller returns <em>&lt;p&gt;Hello, world!&lt;/p&gt;</em> for any request. Set the number of drogon threads to 16. The processing function is as follows and you can find the source code at the <em>drogon/examples/benchmark</em> path:</p>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">BenchmarkCtrl</span><span class=\"o\">::</span><span class=\"n\">asyncHandleHttpRequest</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">HttpRequestPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">HttpResponsePtr</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;&amp;</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//write your application logic here</span>\n    <span class=\"k\">auto</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"o\">::</span><span class=\"n\">newHttpResponse</span><span class=\"p\">();</span>\n    <span class=\"n\">resp</span><span class=\"o\">-&gt;</span><span class=\"n\">setBody</span><span class=\"p\">(</span><span class=\"s\">&quot;&lt;p&gt;Hello, world!&lt;/p&gt;&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">resp</span><span class=\"o\">-&gt;</span><span class=\"n\">setExpiredTime</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>For comparison, I chose nginx for comparison testing, wrote a <em>hello_world_module</em>, and compiled it with the nginx source. The nginx worker_processes parameter is set to 16.</p>\n<p>The test tool is <em>httpress</em>, a good performance HTTP stress test tool.</p>\n<p>We adjust the parameters of httpress, test each set of parameters five times, and record the maximum and minimum values \u200bof the number of requests processed per second. The test results are as follows:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"26%\" />\n<col width=\"40%\" />\n<col width=\"8%\" />\n<col width=\"25%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Command line</th>\n<th class=\"head\">Description</th>\n<th class=\"head\">&#160;</th>\n<th class=\"head\">Drogon(kQPS)   nginx(kQPS)</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>httpress -c 100 -n 1000000 -t 16 -k -q URL</td>\n<td>100 connections, 1 million requests, 16 threads,Keep-Alive</td>\n<td>561/552</td>\n<td>330/329</td>\n</tr>\n<tr class=\"row-odd\"><td>httpress -c 100 -n 1000000 -t 12 -q URL</td>\n<td>100 connections, 1 million requests, 12 threads, no Keep-Alive</td>\n<td>140/135</td>\n<td>31/49</td>\n</tr>\n<tr class=\"row-even\"><td>httpress -c 1000 -n 1000000 -t 16 -k -q URL</td>\n<td>1000 connections, 1 million requests, 16 threads,Keep-Alive</td>\n<td>573/565</td>\n<td>333/327</td>\n</tr>\n<tr class=\"row-odd\"><td>httpress -c 1000 -n 1000000 -t 16 -q URL</td>\n<td>1000 connections, 1 million requests, 16 threads,no Keep-Alive</td>\n<td>155/143</td>\n<td>52/50</td>\n</tr>\n<tr class=\"row-even\"><td>httpress -c 10000 -n 4000000 -t 16 -k -q URL</td>\n<td>10000 connections, 4 million requests, 16 threads,Keep-Alive</td>\n<td>512/508</td>\n<td>316/314</td>\n</tr>\n<tr class=\"row-odd\"><td>httpress -c 10000 -n 1000000 -t 16 -q URL</td>\n<td>10000 connections, 1 million requests, 16 threads,no Keep-Alive</td>\n<td>143/141</td>\n<td>43/40</td>\n</tr>\n</tbody>\n</table>\n<p>As you can see, using the Keep-Alive option on the client side, drogon can process more than 500,000 requests per second in the case where a connection can send multiple requests. This score is quite good. In the case that each request initiates a connection, CPU time will be spent on TCP connection establishment and disconnection, and the throughput will drop to 140,000 requests per second, which is reasonable.</p>\n<p>It\u2019s easy to see that drogon has a clear advantage over nginx in the above test. If someone does a more accurate test, please correct me.</p>\n<p>The image below is a screenshot of a test:</p>\n<p>Test Result</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["Coz-en", "Coz", "N", "next"], ["AOP-Aspect-Oriented-Programming-en", "AOP Aspect Oriented Programming", "P", "previous"]], "sourcename": "Benchmarks-en.rstd.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Benchmarks</a><ul>\n<li><a class=\"reference internal\" href=\"#test-environment\">Test environment</a></li>\n<li><a class=\"reference internal\" href=\"#test-plan-and-results\">Test plan and results</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rstd", "current_page_name": "Benchmarks-en", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}