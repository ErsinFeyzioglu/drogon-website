<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Overview-en.rstd">
    <section ids="overview" names="overview">
        <title>
            Overview
        <paragraph>
            <emphasis>
                Drogon
             is a C++14/17-based HTTP application framework. Drogon can be used to easily build various types of web application server programs using C++.
        <paragraph>
            <emphasis>
                Drogon
             is the name of a dragon in the American TV series “Game of Thrones” that I really like.
        <paragraph>
            Drogon’s main application platform is Linux. It also supports Mac OS, FreeBSD and Windows.
        <paragraph>
            Its main features are as follows:
        <block_quote>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>
                        Use a non-blocking I/O network lib based on epoll (kqueue under macOS/FreeBSD) to provide high-concurrency, high-performance network IO, please visit the 
                        <reference name="TFB Tests Results" refuri="https://www.techempower.com/benchmarks/#section=data-r19&hw=ph&test=composite">
                            TFB Tests Results
                        <target ids="tfb-tests-results" names="tfb\ tests\ results" refuri="https://www.techempower.com/benchmarks/#section=data-r19&hw=ph&test=composite">
                          for more details;
                <list_item>
                    <paragraph>
                        Provide a completely asynchronous programming mode;
                <list_item>
                    <paragraph>
                        Support Http1.0/1.1 (server side and client side);
                <list_item>
                    <paragraph>
                        Based on template, a simple reflection mechanism is implemented to completely decouple the main program framework, controllers and views.
                <list_item>
                    <paragraph>
                        Support cookies and built-in sessions;
                <list_item>
                    <paragraph>
                        Support back-end rendering, the controller generates the data to the view to generate the Html page. Views are described by CSP template files, C++ codes are embedded into Html pages through CSP tags. And the drogon command-line tool automatically generates the C++ code files for compilation;
                <list_item>
                    <paragraph>
                        Support view page dynamic loading (dynamic compilation and loading at runtime);
                <list_item>
                    <paragraph>
                        Provide a convenient and flexible routing solution from the path to the controller handler;
                <list_item>
                    <paragraph>
                        Support filter chains to facilitate the execution of unified logic (such as login verification, Http Method constraint verification, etc.) before handling HTTP requests;
                <list_item>
                    <paragraph>
                        Support https (based on OpenSSL);
                <list_item>
                    <paragraph>
                        Support WebSocket (server side and client side);
                <list_item>
                    <paragraph>
                        Support JSON format request and response, very friendly to the Restful API application development;
                <list_item>
                    <paragraph>
                        Support file download and upload;
                <list_item>
                    <paragraph>
                        Support gzip, brotli compression transmission;
                <list_item>
                    <paragraph>
                        Support pipelining;
                <list_item>
                    <paragraph>
                        Provide a lightweight command line tool, drogon_ctl, to simplify the creation of various classes in Drogon and the generation of view code;
                <list_item>
                    <paragraph>
                        Support non-blocking I/O based asynchronously reading and writing database (PostgreSQL and MySQL(MariaDB) database);
                <list_item>
                    <paragraph>
                        Support asynchronously reading and writing sqlite3 database based on thread pool;
                <list_item>
                    <paragraph>
                        Support ARM Architecture;
                <list_item>
                    <paragraph>
                        Provide a convenient lightweight ORM implementation that supports for regular object-to-database bidirectional mapping;
                <list_item>
                    <paragraph>
                        Support plugins which can be installed by the configuration file at load time;
                <list_item>
                    <paragraph>
                        Support AOP with build-in joinpoints.
