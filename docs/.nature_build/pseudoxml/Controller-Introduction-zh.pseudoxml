<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Controller-Introduction-zh.rstd">
    <section ids="id1" names="控制器\ 简介">
        <title>
            控制器 简介
        <section ids="id2" names="简介">
            <title>
                简介
            <paragraph>
                控制器(controller)在web应用开发中处于相当重要的地位，它处理浏览器发来的请求，然后生成响应发送给浏览器；drogon框架已经帮我们处理好网络传输、Http协议的解析等等细节，我们只需要关注控制器的逻辑即可；每一个控制器对象可以有一个或者多个处理函数(一般称为handler)，函数的接口，一般定义成如下形式：
            <index entries="['single',\ 'handlerName\ (C++\ function)',\ '_CPPv311handlerNameRK14HttpRequestPtrRRNSt8functionIFvRK15HttpResponsePtrEEEz',\ '',\ None]">
            <desc desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature first="False" ids="_CPPv311handlerNameRK14HttpRequestPtrRRNSt8functionIFvRK15HttpResponsePtrEEEz _CPPv211handlerNameRK14HttpRequestPtrRRNSt8functionIFvRK15HttpResponsePtrEEEz" is_multiline="True">
                    <desc_signature_line add_permalink="False" xml:space="preserve">
                        Void
                         
                        <desc_name xml:space="preserve">
                            handlerName
                        <desc_parameterlist xml:space="preserve">
                            <desc_parameter noemph="True" xml:space="preserve">
                                <desc_annotation xml:space="preserve">
                                    const
                                 
                                HttpRequestPtr
                                 
                                &
                                <emphasis>
                                    req
                            <desc_parameter noemph="True" xml:space="preserve">
                                std
                                ::
                                function
                                <
                                void
                                <desc_parameterlist xml:space="preserve">
                                    <desc_parameter noemph="True" xml:space="preserve">
                                        <desc_annotation xml:space="preserve">
                                            const
                                         
                                        HttpResponsePtr
                                        &
                                >
                                 
                                &
                                &
                                <emphasis>
                                    callback
                            <desc_parameter noemph="True" xml:space="preserve">
                                ...
                <desc_content>
            <paragraph>
                其中，
                <problematic ids="id4" refid="id3">
                    *
                req*是Http请求的对象(被智能指针包裹)，
                <problematic ids="id6" refid="id5">
                    *
                callback*是框架传给控制器的回调函数对象，控制器生成应答对象(也通过智能指针包裹)后，通过callback把该对象传给drogon，然后框架会帮你把响应内容发送给浏览器，最后面的是若干参数列表…，由drogon根据映射规则把Http请求中的参数映射到对应的handler的形参上，这是对应用开发是非常方便的。
            <paragraph>
                很明显，这是个异步接口，用户可以在其它线程完成耗时操作后再调用callback；
            <paragraph>
                drogon的控制器分为三种类型，
                <emphasis>
                    HttpSimpleController
                ,*HttpController*和*WebSocketController*，用户使用时，需要继承相应的类模板，比如，一个HttpSimpleController的自定义类”MyClass”声明如下：
            <container classes="literal-block-wrapper" ids="id8" literal_block="True">
                <caption>
                    <emphasis>
                        MyClass.h
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    class MyClass:public drogon::HttpSimpleController<MyClass>
                    {
                    public:
                        //TestController(){}
                        virtual void asyncHandleHttpRequest(const HttpRequestPtr &req,
                                                            std::function<void (const HttpResponsePtr &)> &&callback) override;
                    
                        PATH_LIST_BEGIN
                        PATH_ADD("/json");
                        PATH_LIST_END
                    };
        <section ids="id7" names="控制器的生命周期">
            <title>
                控制器的生命周期
            <paragraph>
                注册到drogon框架的控制器最多只会有一个实例，在整个应用运行期间都不会销毁，所以，用户可以在控制器类中声明和使用成员变量。注意，控制器的handler被调用时，是在多线程环境下的（当框架的IO线程数配置成大于1的值时），如果需要访问非临时变量，请做好并发保护工作。
