<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Controller-HttpController-en.rstd">
    <section ids="controller-httpcontroller" names="controller\ httpcontroller">
        <title>
            Controller HttpController
        <section ids="generation" names="generation">
            <title>
                Generation
            <paragraph>
                You can use the 
                <emphasis>
                    drogon_ctl
                 command line tool to quickly generate custum controller class source files based on 
                <emphasis>
                    HttpController
                , the command format is as bellow:
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                drogon_ctl create controller -h <[namespace::]class_name>
            <paragraph>
                We create one controller class named 
                <emphasis>
                    User
                , under namespace 
                <emphasis>
                    demo v1
                :
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                drogon_ctl create controller -h demo::v1::User
            <paragraph>
                As you can see, two files have been added to the current directory, demo_v1_User.h and demo_v1_User.cc.
            <paragraph>
                demo_v1_User.h is as follows:
            <container classes="literal-block-wrapper" ids="id1" literal_block="True">
                <caption>
                    <emphasis>
                        demo_v1_User.h
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    #pragma once
                    #include <drogon/HttpController.h>
                    using namespace drogon;
                    namespace demo
                    {
                        namespace v1
                        {
                            class User:public drogon::HttpController<User>
                            {
                            public:
                                METHOD_LIST_BEGIN
                                    //use METHOD_ADD to add your custom processing function here;
                                METHOD_LIST_END
                                //your declaration of processing function maybe like this:
                            };
                        }
                    }
            <paragraph>
                demo_v1_User.cc is as follows:
            <container classes="literal-block-wrapper" ids="id2" literal_block="True">
                <caption>
                    <emphasis>
                        demo_v1_User.cc
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    #include "demo_v1_User.h"
                    using namespace demo::v1;
                    //add definition of your processing function here
        <section ids="usage" names="usage">
            <title>
                Usage
            <paragraph>
                Let’s edit the two files:
            <paragraph>
                demo_v1_User.h is as follows:
            <container classes="literal-block-wrapper" ids="id3" literal_block="True">
                <caption>
                    <emphasis>
                        demo_v1_User.h
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    #pragma once
                    #include <drogon/HttpController.h>
                    using namespace drogon;
                    namespace demo
                    {
                        namespace v1
                        {
                            class User:public drogon::HttpController<User>
                            {
                            public:
                                METHOD_LIST_BEGIN
                                    //use METHOD_ADD to add your custom processing function here;
                                    METHOD_ADD(User::login,"/token?userId={1}&passwd={2}",Post);
                                    METHOD_ADD(User::getInfo,"/{1}/info?token={2}",Get);
                                METHOD_LIST_END
                                //your declaration of processing function maybe like this:
                                void login(const HttpRequestPtr &req,
                                        std::function<void (const HttpResponsePtr &)> &&callback,
                                        std::string &&userId,
                                        const std::string &password);
                                void getInfo(const HttpRequestPtr &req,
                                            std::function<void (const HttpResponsePtr &)> &&callback,
                                            std::string userId,
                                            const std::string &token) const;
                            };
                        }
                    }
            <paragraph>
                demo_v1_User.cc is as follows:
            <container classes="literal-block-wrapper" ids="id4" literal_block="True">
                <caption>
                    <emphasis>
                        demo_v1_User.cc
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    #include "demo_v1_User.h"
                    using namespace demo::v1;
                    //add definition of your processing function here
                    
                    void User::login(const HttpRequestPtr &req,
                            std::function<void (const HttpResponsePtr &)> &&callback,
                            std::string &&userId,
                            const std::string &password)
                    {
                        LOG_DEBUG<<"User "<<userId<<" login";
                        //Authentication algorithm, read database, verify identity, etc...
                        //...
                        Json::Value ret;
                        ret["result"]="ok";
                        ret["token"]=drogon::utils::getUuid();
                        auto resp=HttpResponse::newHttpJsonResponse(ret);
                        callback(resp);
                    }
                    void User::getInfo(const HttpRequestPtr &req,
                                std::function<void (const HttpResponsePtr &)> &&callback,
                                std::string userId,
                                const std::string &token) const
                    {
                        LOG_DEBUG<<"User "<<userId<<" get his information";
                    
                        //Verify the validity of the token, etc.
                        //Read the database or cache to get user information
                        Json::Value ret;
                        ret["result"]="ok";
                        ret["user_name"]="Jack";
                        ret["user_id"]=userId;
                        ret["gender"]=1;
                        auto resp=HttpResponse::newHttpJsonResponse(ret);
                        callback(resp);
                    }
            <paragraph>
                Each 
                <emphasis>
                    HttpController
                 class can define many Http request handlers. Since the number of functions can be arbitrarily large, it is unrealistic to overload them with virtual functions. We need to register the handler itself (not the class) in the framework.
            <paragraph>
                The mapping from the URL path to the handler is done by macros. You can add a multipath map with the 
                <emphasis>
                    METHOD_ADD
                 macro or the 
                <emphasis>
                    ADD_METHOD_TO
                 macro. All 
                <emphasis>
                    METHOD_ADD
                 and 
                <emphasis>
                    ADD_METHOD_TO
                 statements should be sandwiched between the 
                <emphasis>
                    METHOD_LIST_BEGIN
                 and 
                <emphasis>
                    METHOD_LIST_END
                 macro statements.
            <paragraph>
                The 
                <emphasis>
                    METHOD_ADD
                 macro automatically prefixes the namespace and class name in the path map. Therefore, in this example, the login function is registered to the 
                <emphasis>
                    /demo/v1/user/token
                 path, and the getInfo function is registered to the 
                <emphasis>
                    /demo/v1/user/xxx/info
                 path. Constraints are similar to the 
                <emphasis>
                    PATH_ADD
                 macro of HttpSimpleController and not be described here.
            <paragraph>
                The 
                <emphasis>
                    ADD_METHOD_TO
                 macro acts almost as much as the former, except that it does not automatically add any prefixes, i.e. the path registered by the macro is an absolute path.
            <paragraph>
                We see that 
                <emphasis>
                    HttpController
                 provides a more flexible path mapping mechanism, we can put a class of functions in a class.
            <paragraph>
                In addition, you can see that the macros provide a method for parameters mapping. We can map the parameters on the path to the parameter list of the function. The number of URL path parameter corresponds to the function parameter’s position, this is very convenient. The common types which can be converted by string type all can be used as function parameters (such as std::string, int, float, double, etc.), the drogon framework will automatically help you convert the type, this is very convenient for developing. Note that lvalue references must be of type const.
            <paragraph>
                The same path can be mapped multiple times, distinguished from each other by Http Method, which is legal and is a common practice of the Restful API, such as:
            <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                METHOD_LIST_BEGIN
                    METHOD_ADD(Book::getInfo,"/{1}?detail={2}",Get);
                    METHOD_ADD(Book::newBook,"/{1}",Post);
                    METHOD_ADD(Book::deleteOne,"/{1}",Delete);
                METHOD_LIST_END
            <paragraph>
                When you use the 
                <emphasis>
                    ADD_METHOD
                 macro and the class belongs to some namespace, you should add namespace to the access url, in this example, use 
                <emphasis>
                    http://localhost/demo/v1/user/token?userid=xxx&passwd=xxx
                 or 
                <emphasis>
                    http://localhost/demo/v1/user/xxxxx/info?token=xxxx
                 to access.
            <paragraph>
                The placeholders of path parameters can be written in several ways:
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            {}: The position on the path is the position of the function parameter, which indicates that the path parameter maps to the corresponding position of the handler parameters.
                    <list_item>
                        <paragraph>
                            {1},{2}: The path parameters with a number in are mapped to the handler parameters specified by the number.
                    <list_item>
                        <paragraph>
                            {anystring}: Strings here have no practical effect, but can improve the readability of the program, equivalent to {}.
                    <list_item>
                        <paragraph>
                            {1:anystring},{2:xxx}: The number before the colon represents the position, and the string behind it does not actually work, but can improve the readability of the program, which is equivalent to the {1} and {2}.
            <paragraph>
                The latter two writes are recommended, and if the path parameters and function parameters are in the same order, the third is enough. It is easy to know that the following writes are equivalent:
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            “/users/{}/books/{}”
                    <list_item>
                        <paragraph>
                            “/users/{}/books/{2}”
                    <list_item>
                        <paragraph>
                            “/users/{user_id}/books/{book_id}”
                    <list_item>
                        <paragraph>
                            “/users/{1:user_id}/books/{2}”
            <note>
                <paragraph>
                    Note: Path matching is not case sensitive, parameter names are case sensitive, (Parameter values ​​can be mixed in uppercase and lowercase and passed unchanged to the controller)
        <section ids="parameters-mapping" names="parameters\ mapping">
            <title>
                Parameters mapping
            <paragraph>
                Through the previous description, we know that the parameters on the path and the query parameters after the question mark can be mapped to the parameter list of the handler function. The type of the target parameter needs to meet the following conditions:
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Must be one of a value type, a constant left value reference, or a non-const right value reference. It cannot be a non-const lvalue reference. It is recommended to use an rvalue reference so that the user can dispose of it at will;
                    <list_item>
                        <paragraph>
                            Basic types such as int, long, long long, unsigned long, unsigned long long, float, double, long double, etc can be used as parameter types;
                    <list_item>
                        <paragraph>
                            std::string；
                    <list_item>
                        <paragraph>
                            Any type that can be assigned using the 
                            <emphasis>
                                stringstream >>
                             operator;
            <paragraph>
                <emphasis>
                    In addition, the drogon framework also provides a mapping mechanism from the HttpRequestPtr object to any type of parameter
                . When the number of mapping parameters in your handler parameter list is more than the parameters on the path, the extra parameters will be converted by the HttpRequestPtr object. The user can define any type of conversion, the way to define this conversion is to specialize the 
                <emphasis>
                    fromRequest
                 template (which is defined in the HttpRequest.h header file) in the drogon namespace, for example, say we need to make a RESTful interface to create a new user, we define the user’s structure as follows:
            <container classes="literal-block-wrapper" ids="id5" literal_block="True">
                <caption>
                    <emphasis>
                        myapp_User_drogon.cc
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    namespace myapp{
                    struct User{
                        std::string userName;
                        std::string email;
                        std::string address;
                    };
                    }
                    namespace drogon
                    {
                    template <>
                    inline myapp::User fromRequest(const HttpRequest &req)
                    {
                        auto json = req.getJsonObject();
                        myapp::User user;
                        if(json)
                        {
                            user.userName = (*json)["name"].asString();
                            user.email = (*json)["email"].asString();
                            user.address = (*json)["address"].asString();
                        }
                        return user;
                    }
                    
                    }
            <paragraph>
                With the above definition and template specialization, we can define the path map and handler as follows:
            <container classes="literal-block-wrapper" ids="id6" literal_block="True">
                <caption>
                    <emphasis>
                        UserController.cc
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    class UserController:public drogon::HttpController<UserController>
                    {
                    public:
                        METHOD_LIST_BEGIN
                            //use METHOD_ADD to add your custom processing function here;
                            ADD_METHOD_TO(UserController::newUser,"/users",Post);
                        METHOD_LIST_END
                        //your declaration of processing function maybe like this:
                        void newUser(const HttpRequestPtr &req,
                                    std::function<void (const HttpResponsePtr &)> &&callback,
                                    myapp::User &&pNewUser) const;
                    };
            <paragraph>
                It can be seen that the third parameter of 
                <emphasis>
                    myapp::User
                 type has no corresponding placeholder on the mapping path, and the framework regards it as a parameter converted from the 
                <emphasis>
                    req
                 object, and obtains this parameter through the user-specialized function template. This is very convenient for users.
            <paragraph>
                Further, some users do not need to access the HttpRequestPtr object except for their custom type data, so he can put the custom object in the position of the first parameter, and the framework can also correctly complete the mapping, such as the above example. It can also be written as follows:
            <container classes="literal-block-wrapper" ids="id7" literal_block="True">
                <caption>
                    <emphasis>
                        UserController.cc
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                    class UserController:public drogon::HttpController<UserController>
                    {
                    public:
                        METHOD_LIST_BEGIN
                            //use METHOD_ADD to add your custom processing function here;
                            ADD_METHOD_TO(UserController::newUser,"/users",Post);
                        METHOD_LIST_END
                        //your declaration of processing function maybe like this:
                        void newUser(myapp::User &&pNewUser,
                                    std::function<void (const HttpResponsePtr &)> &&callback) const;
                    };
        <section ids="multiple-path-mapping" names="multiple\ path\ mapping">
            <title>
                multiple path mapping
            <paragraph>
                Drogon supports the use of regular expressions in path mapping, which can be used outside the ‘{}’ curly brackets, for example:
            <paragraph>
                ADD_METHOD_TO(UserController::handler1,”/users/.*”,Post); /// Match any path prefixed with 
                <title_reference>
                    /users/
                
                ADD_METHOD_TO(UserController::handler2,”/{name}/[0-9]+”,Post); ///Match any path composed with a name string and a number.
        <section ids="regular-expression" names="regular\ expression">
            <title>
                Regular expression
            <paragraph>
                The above method has limited support for regular expressions. If users want to use regular expressions freely, drogon provides the 
                <emphasis>
                    ADD_METHOD_VIA_REGEX
                 macro to achieve this, such as:
            <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">
                ADD_METHOD_VIA_REGEX(UserController::handler1,"/users/(.*)",Post); /// Match any path prefixed with `/users/` and map the rest of the path to a parameter of the handler1.
                ADD_METHOD_VIA_REGEX(UserController::handler2,"/.*([0-9]*)",Post); /// Matche any path that ends in a number and map that number to a parameter of the handler2.
                ADD_METHOD_VIA_REGEX(UserController::handler3,"/(?!data).*",Post); /// Matches any path that does not start with '/data'
            <paragraph>
                As can be seen, parameter mapping can also be done using regular expressions, and all strings matched by subexpressions will be mapped to the parameters of the handler in order.
            <note>
                <paragraph>
                    It should be noted that when using regular expressions, you should pay attention to matching conflicts (multiple different handlers are matched). When conflicts happen in the same controller, drogon will only execute the first handler (the one registered in the framework first). When conflicts happen between different controllers, which handler to be executed is uncertain. Therefore, users need to avoid this kind of conflicts.
