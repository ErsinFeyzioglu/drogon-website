<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Installation-zh.rstd">
    <section ids="installation" names="installation">
        <title>
            Installation
        <paragraph>
            本节以Linux为例，简介安装过程，其它系统，大同小异
        <section ids="id1" names="系统要求">
            <title>
                系统要求
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Linux内核应不低于2.6.9，64位版本；
                    <list_item>
                        <paragraph>
                            gcc版本不低于5.4.0；
                    <list_item>
                        <paragraph>
                            构建工具是cmake,cmake版本应不低于3.5；
                    <list_item>
                        <paragraph>
                            git版本管理工具；
        <section ids="id2" names="依赖库">
            <title>
                依赖库
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            trantor，non-blocking I/O C++网络库，也是作者开发，已作为git仓库submodule，无需提前安装；
                    <list_item>
                        <paragraph>
                            jsoncpp，json的c++库，版本不低于1.7；
                    <list_item>
                        <paragraph>
                            libuuid，生成uuid的c库；
                    <list_item>
                        <paragraph>
                            zlib，用于支持压缩传输；
                    <list_item>
                        <paragraph>
                            OpenSSL，并非必须，如果安装了OpenSSL库，drogon将支持HTTPS，否则drogon只支持HTTP；
                    <list_item>
                        <paragraph>
                            c-ares, 并非必须，如果安装了ares库，drogon对DNS的支持会具有更好的性能；
                    <list_item>
                        <paragraph>
                            libbrotli，并非必须，如果安装了brotli库，drogon的HTTP响应会支持brotli压缩；
                    <list_item>
                        <paragraph>
                            boost，版本不低于1.61，只在C++编译器不支持c++17时才需要安装；
                    <list_item>
                        <paragraph>
                            postgreSQL, mariadb, sqlite3的客户端开发库，并非必须，安装后drogon会提供对响应的库的访问能力；
                    <list_item>
                        <paragraph>
                            gtest, 并非必须，如果安装了gtest库，drogon的单元测试代码可以被编译；
        <section ids="id3" names="系统准备范例">
            <title>
                系统准备范例
            <section ids="ubuntu-18-04" names="ubuntu\ 18.04">
                <title>
                    Ubuntu 18.04
                <paragraph>
                    环境
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    sudo apt install git
                    sudo apt install gcc
                    sudo apt install g++
                    sudo apt install cmake
                <paragraph>
                    jsoncpp
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    sudo apt install libjsoncpp-dev
                <paragraph>
                    uuid
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    sudo apt install uuid-dev
                <paragraph>
                    OpenSSL
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    sudo apt install openssl
                    sudo apt install libssl-dev
                <paragraph>
                    zlib
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    sudo apt install zlib1g-dev
            <section ids="centos-7-5" names="centos\ 7.5">
                <title>
                    CentOS 7.5
                <paragraph>
                    环境
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    yum install git
                    yum install gcc
                    yum install gcc-c++
                <paragraph>
                    默认安装的cmake版本太低，使用源码安装
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    git clone https://github.com/Kitware/CMake
                    cd CMake/
                    ./bootstrap && make && make install
                <paragraph>
                    升级gcc
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    yum install centos-release-scl
                    yum install devtoolset-8
                    scl enable devtoolset-8 bash
                <note>
                    <paragraph>
                        注意: 
                        <emphasis>
                            scl enable devtoolset-8
                         bash命令仅是临时性的使新的gcc生效，直到会话结束。如果想永久使用新版gcc,可以使用命令*echo “scl enable devtoolset-8 bash” >> ~/.bash_profile*, 系统重新启动后将自动使用新版gcc。
                <paragraph>
                    jsoncpp
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    git clone https://github.com/open-source-parsers/jsoncpp
                    cd jsoncpp/
                    mkdir build
                    cd build
                    cmake ..
                    make && make install
                <paragraph>
                    uuid
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    yum install libuuid-devel
                <paragraph>
                    OpenSSL
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    yum install openssl-devel
                <paragraph>
                    zlib
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    yum install zlib-devel
        <section ids="id4" names="数据库环境">
            <title>
                数据库环境
            <note>
                <paragraph>
                    注意：下面的这些库都不是必须的, 用户可以根据实际需求选择安装一个或者多个数据库。
            <note>
                <paragraph>
                    注意：如果将来的开发需要用到数据库，请先安装好数据库环境，再安装drogon, 否则，会出现找不到数据库的问题。
            <section ids="postgresql" names="postgresql">
                <title>
                    PostgreSQL
                <paragraph>
                    PostgreSQL的原生C库libpq是需要安装的，安装方法如下：
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>
                                ubuntu 16: sudo apt-get install postgresql-server-dev-all
                        <list_item>
                            <paragraph>
                                ubuntu 18: sudo apt-get install postgresql-all
                        <list_item>
                            <paragraph>
                                centOS 7: yum install postgresql-devel
                        <list_item>
                            <paragraph>
                                MacOS: brew install postgresql
            <section ids="mysql" names="mysql">
                <title>
                    MySQL
                <paragraph>
                    MySQL的原生库不支持异步读写，而通过同步接口+线程池的方式对上层提供异步接口并不是一个好的策略，幸好，MySQL还有一个原开发者社区维护的版本MariaDB，该版本和MySQL的对应版本兼容，并且它的开发库支持异步读写，因此，Drogon的MySQL支持采用MariaDB开发库，你的系统，Mysql和MariaDB最好不要混用，可以统一安装成MariaDB。
                <paragraph>
                    安装方法如下:
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>
                                ubuntu: sudo apt install libmariadbclient-dev
                        <list_item>
                            <paragraph>
                                centOS 7: yum install mariadb-devel
                        <list_item>
                            <paragraph>
                                MacOS: brew install mariadb
            <section ids="sqlite3" names="sqlite3">
                <title>
                    Sqlite3
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>
                                ubuntu: sudo apt-get install libsqlite3-dev
                        <list_item>
                            <paragraph>
                                centOS: yum install sqlite-devel
                        <list_item>
                            <paragraph>
                                MacOS: brew install sqlite3
                <note>
                    <paragraph>
                        注意: 上述有些命令只安装了开发库，如果还要安装server端，请自行google。
        <section ids="drogon" names="安装drogon">
            <title>
                安装drogon
            <paragraph>
                假设上述系统环境和库依赖都已经准备好，安装过程是非常简单的；
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                cd $WORK_PATH
                git clone https://github.com/an-tao/drogon
                cd drogon
                git submodule update --init
                mkdir build
                cd build
                cmake ..
                make && sudo make install
            <paragraph>
                默认是编译debug版本，如果想编译release版本，cmake命令要带如下参数：
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                cmake -DCMAKE_BUILD_TYPE=Release ..
            <paragraph>
                安装结束后，将有如下文件被安装在系统中(CMAKE_INSTALL_PREFIX可以改变安装位置)：
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            drogon的头文件被安装到/usr/local/include/drogon中；
                    <list_item>
                        <paragraph>
                            drogon的库文件libdrogon.a被安装到/usr/local/lib中；
                    <list_item>
                        <paragraph>
                            drogon的命令行工具drogon_ctl被安装到/usr/local/bin中；
                    <list_item>
                        <paragraph>
                            trantor的头文件被安装到/usr/local/include/trantor中；
                    <list_item>
                        <paragraph>
                            trantor的库文件libtrantor.a被安装到/usr/local/lib中；
            <section ids="id5" names="直接使用drogon源码">
                <title>
                    直接使用drogon源码
                <paragraph>
                    当然，你也可以在你的项目中包含drogon源码，比如将drogon放置在你的项目目录的third_party下，那么，你只需要在你项目的cmake文件里添加如下两行：
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    add_subdirectory(third_party/drogon)
                    target_link_libraries(${PROJECT_NAME} PRIVATE drogon)
            <section ids="vcpkg" names="使用vcpkg安装">
                <title>
                    使用vcpkg安装
                <paragraph>
                    The easiest way to install drogon on windows is to use vcpkg
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    vcpkg.exe install drogon
                <paragraph>
                    或者
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">
                    vcpkg.exe install drogon:x64-windows
            <section ids="docker" names="使用docker镜像">
                <title>
                    使用docker镜像
                <paragraph>
                    我们也在 
                    <reference name="docker hub" refuri="https://hub.docker.com/r/drogonframework/drogon">
                        docker hub
                    <target ids="docker-hub" names="docker\ hub" refuri="https://hub.docker.com/r/drogonframework/drogon">
                     . 上提供了构建好的docker镜像. 在这个docker里Drogon和它所有的依赖都已经安装完毕，用户可以在上面直接开发Drogon应用程序。
