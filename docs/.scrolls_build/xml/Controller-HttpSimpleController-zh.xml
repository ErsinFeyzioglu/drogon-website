<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Controller-HttpSimpleController-zh.rstd">
    <section ids="httpsimplecontroller" names="控制器\ httpsimplecontroller">
        <title>控制器 HttpSimpleController</title>
        <paragraph>可以由*drogon_ctl*命令行工具快速生成基于*HttpSimpleController*的自定义类的源文件，命令格式如下：</paragraph>
        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">drogon_ctl create controller &lt;[namespace::]class_name&gt;</literal_block>
        <paragraph>我们创建一个名称为*TestCtrl*的控制器：</paragraph>
        <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">drogon_ctl create controller TestCtrl</literal_block>
        <paragraph>可以看到，目录下新增加了两个文件，TestCtrl.h和TestCtrl.cc，下面阐述一下这两个文件。</paragraph>
        <container classes="literal-block-wrapper" ids="id1" literal_block="True">
            <caption><strong>TestCtrl.h：</strong></caption>
            <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#pragma once
#include &lt;drogon/HttpSimpleController.h&gt;
using namespace drogon;
class TestCtrl:public drogon::HttpSimpleController&lt;TestCtrl&gt;
{
public:
    virtual void asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                        std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)override;
    PATH_LIST_BEGIN
    //list path definitions here;
    //PATH_ADD("/path","filter1","filter2",HttpMethod1,HttpMethod2...);
    PATH_LIST_END
};</literal_block>
        </container>
        <container classes="literal-block-wrapper" ids="id2" literal_block="True">
            <caption><strong>TestCtrl.cc</strong></caption>
            <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "TestCtrl.h"
void TestCtrl::asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                    std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)
{
    //write your application logic here
}</literal_block>
        </container>
        <paragraph>每个HttpSimpleController类只能定义一个Http请求处理函数(handler)，而且通过虚函数重载定义。</paragraph>
        <paragraph>从URL路径到处理函数的路由(或称映射)由宏完成，可以用*PATH_ADD*宏添加多重路径映射，所有*PATH_ADD*语句应夹在*PATH_LIST_BEGIN*和*PATH_LIST_END*宏语句之间。</paragraph>
        <paragraph>第一个参数是映射的路径,路径后面的参数是对这个路径的约束，目前支持两种约束，一种是HttpMethod类型，表示该路径允许使用的Http方法，可以配置零个或多个，一种是HttpFilter类的名字，这种对象执行特定的过滤操作，也可以配置0个或多个，两种类型没有顺序要求，框架会处理好类型的匹配。关于Filter，请参阅过滤器Filter.</paragraph>
        <paragraph>用户可以把同一个Simple Controller注册到多个路径上，也可以在同一个路径上注册多个Simple Controller（通过HTTP method区分）。</paragraph>
        <paragraph>你可以定义一个HttpResponse类的变量，然后使用callback()返回这个变量即可:</paragraph>
        <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">//write your application logic here
auto resp=HttpResponse::newHttpResponse();
resp-&gt;setStatusCode(k200OK);
resp-&gt;setContentTypeCode(CT_TEXT_HTML);
resp-&gt;setBody("Your Page Contents");
callback(resp);</literal_block>
        <paragraph><strong>上述路径到处理函数的映射是在编译期完成的，事实上，drogon框架也提供了运行期完成映射的接口，运行期映射可以让用户通过配置文件或其它用户接口完成映射或修改映射关系而无需重新编译这个程序(出于性能的考虑，禁止在运行app().run()之后再注册任何映射)。</strong></paragraph>
    </section>
</document>
