<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Quick-Start-en.rstd">
    <section ids="quick-start" names="quick\ start">
        <title>Quick Start</title>
        <section ids="static-site" names="static\ site">
            <title>Static Site</title>
            <paragraph>Let’s start with a simple example that introduces the usage of drogon. In this example we create a project using the command line tool <emphasis>drogon_ctl</emphasis>:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">drogon_ctl create project your_project_name</literal_block>
            <paragraph>There are several useful folders in the project directory already:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">├── build                         Build folder
├── CMakeLists.txt                Project cmake configuration file
├── config.json                   Drogon application configuration file
├── controllers                   The folder where the controller source files are stored
├── filters                       The folder where the filter files are stored
├── main.cc                       Main program
├── models                        The folder of the database model file
│   └── model.json
└── views                         The folder where view csp files are stored</literal_block>
            <paragraph>Users can put various files (such as controllers, filters, views, etc.) into corresponding folders. For more convenience and less error, we strongly recommend that users create their own web application projects using the <literal>drogon_ctl</literal> command. See drogon_ctl for more details.</paragraph>
            <paragraph>Let’s look at the main.cc file:</paragraph>
            <container classes="literal-block-wrapper" ids="id1" literal_block="True">
                <caption><emphasis>main.cpp</emphasis></caption>
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include &lt;drogon/HttpAppFramework.h&gt;
int main() {
    //Set HTTP listener address and port
    drogon::app().addListener("0.0.0.0",80);
    //Load config file
    //drogon::app().loadConfigFile("../config.json");
    //Run HTTP framework,the method will block in the internal event loop
    drogon::app().run();
    return 0;
}</literal_block>
            </container>
            <paragraph>Then build your project as below:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">cd build
cmake ..
make</literal_block>
            <paragraph>After the compilation is complete, run the target <emphasis>./your_project_name</emphasis>.</paragraph>
            <paragraph>Now, we add one simply static file index.html to the Http root path:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">echo '&lt;h1&gt;Hello Drogon!&lt;/h1&gt;' &gt;&gt;index.html</literal_block>
            <paragraph>The default root path is <emphasis>“./”</emphasis>, this could be modified by config.json also, See Configureation File for more details. Then you can visit this page by URL <emphasis>“http://localhost”</emphasis> or <emphasis>“http://localhost/index.html”</emphasis> (or the IP of the server where your wepapp running).</paragraph>
            <seealso>
                <paragraph>Hello Drogon!</paragraph>
            </seealso>
            <paragraph>If server cannot find the the page you have requested, it return 404 page: 404 page</paragraph>
            <note>
                <paragraph>Note: Make sure your server firewall have allowed the 80 port, otherwise you won’t see these pages.</paragraph>
            </note>
            <paragraph>We could copy the directory and files of a static website to the startup directory of this running webapp, then we can access them from the browser. The file types supported by drogon are “html”, “js”, “css”, “xml”, “xsl”, “txt”, “svg”, “ttf”, “otf”, “woff2”, “woff” , “eot”, “png”, “jpg”, “jpeg”, “gif”, “bmp”, “ico”, “icns”, etc by default. Drogon also provides interfaces to change these file types. For details, please refer to the HttpAppFramework API.</paragraph>
        </section>
        <section ids="dynamic-site" names="dynamic\ site">
            <title>Dynamic Site</title>
            <paragraph>Let’s see how to add controllers to this application， and let the controller respond contents.</paragraph>
            <paragraph>One can use the drogon_ctl command line tool to generate controller source files. Let’s run it in the <emphasis>controllers</emphasis> directory:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">drogon_ctl create controller TestCtrl</literal_block>
            <paragraph>As you can see, there are two new files, TestCtrl.h and TestCtrl.cc：</paragraph>
            <paragraph>TestCtrl.h is as follows:</paragraph>
            <container classes="literal-block-wrapper" ids="id2" literal_block="True">
                <caption><emphasis>TestCtrl.h</emphasis></caption>
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#pragma once
#include &lt;drogon/HttpSimpleController.h&gt;
using namespace drogon;
class TestCtrl:public drogon::HttpSimpleController&lt;TestCtrl&gt;
{
public:
    virtual void asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                        std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)override;
    PATH_LIST_BEGIN
    //list path definitions here;
    //PATH_ADD("/path","filter1","filter2",HttpMethod1,HttpMethod2...);
    PATH_LIST_END
};</literal_block>
            </container>
            <paragraph>TestCtrl.cc is as follows:</paragraph>
            <container classes="literal-block-wrapper" ids="id3" literal_block="True">
                <caption><emphasis>TestCtrl.cc</emphasis></caption>
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "TestCtrl.h"
void TestCtrl::asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                    std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)
{
    //write your application logic here
}</literal_block>
            </container>
            <paragraph>Let’s edit the two files and let the controller handle the function response to a simple “Hello World!”</paragraph>
            <paragraph>TestCtrl.h is as follows:</paragraph>
            <container classes="literal-block-wrapper" ids="id4" literal_block="True">
                <caption><emphasis>TestCtrl.h</emphasis></caption>
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#pragma once
#include &lt;drogon/HttpSimpleController.h&gt;
using namespace drogon;
class TestCtrl:public drogon::HttpSimpleController&lt;TestCtrl&gt;
{
public:
    virtual void asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                        std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)override;
    PATH_LIST_BEGIN
    //list path definitions here;
    //PATH_ADD("/path","filter1","filter2",HttpMethod1,HttpMethod2...);
    PATH_ADD("/",Get,Post);
    PATH_ADD("/test",Get);
    PATH_LIST_END
};</literal_block>
            </container>
            <paragraph>Use PATH_ADD to map processing functions on the two paths ‘/’ and ‘/test’ respectively, and adding constraints on these path.</paragraph>
            <paragraph>TestCtrl.cc is as follows:</paragraph>
            <container classes="literal-block-wrapper" ids="id5" literal_block="True">
                <caption><emphasis>TestCtrl.h</emphasis></caption>
                <literal_block highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">#include "TestCtrl.h"
void TestCtrl::asyncHandleHttpRequest(const HttpRequestPtr &amp;req,
                                    std::function&lt;void (const HttpResponsePtr &amp;)&gt; &amp;&amp;callback)
{
    //write your application logic here
    auto resp=HttpResponse::newHttpResponse();
    resp-&gt;setStatusCode(k200OK);
    resp-&gt;setContentTypeCode(CT_TEXT_HTML);
    resp-&gt;setBody("Hello World!");
    callback(resp);
}</literal_block>
            </container>
            <paragraph>Recompile this project with cmake, then run the target ./your_project_name:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">cd ../build
cmake ..
make
./your_project_name</literal_block>
            <paragraph>Typing <emphasis>“http://localhost/”</emphasis> or <emphasis>“http://localhost/test”</emphasis> in the browser address bar, and you will see “Hello World!” in the browser.</paragraph>
            <note>
                <paragraph>Note: If your server both have static and dynamic resource, Drogon use dynamic resource first, In this example，the respond of <reference refuri="http://localhost/">http://localhost/</reference> is Hello Word! in TestCtrl controller instead of Hello Drogon! in static file index.html.</paragraph>
            </note>
            <paragraph>We see that adding a controller to an application is very simple. You only need to add the corresponding source file. Even the main file does not need to be modified. This low-coupling design is very effective for web application development.</paragraph>
            <note>
                <paragraph>Note: Drogon has no restrictions to the location of the controllers source file, you could save it at the project directory also, even you could define new directory in the CMakeLists.txt, it is recommended to use the controllers directory for the convenience of management.</paragraph>
            </note>
        </section>
    </section>
</document>
