<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Installation-en.rstd">
    <section ids="installation" names="installation">
        <title>Installation</title>
        <paragraph>This section takes Linux as an example to introduce the installation process. Other systems are similar;</paragraph>
        <section ids="system-requirements" names="system\ requirements">
            <title>System Requirements</title>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The Linux kernel should be not lower than 2.6.9, 64-bit version;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The gcc version is not less than 5.4.0;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use cmake as the build tool, and the cmake version should be not less than 3.5;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use git as the version management tool;</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
        <section ids="library-dependencies" names="library\ dependencies">
            <title>Library Dependencies</title>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>trantor, a non-blocking I/O C++ network library, also developed by the author of Drogon, has been used as a git repository submodule, no need to install in advance;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>jsoncpp, JSON’s c++ library, the version should be no <emphasis>less than 1.7</emphasis>;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>libuuid, generating c library of uuid;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>zlib, used to support compressed transmission;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>OpenSSL, not mandatory, if the OpenSSL library is installed, drogon will support HTTPS as well, otherwise drogon only supports HTTP.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>c-ares, not mandatory, if the c-ares library is installed，drogon will be more efficient with DNS;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>libbrotli, not mandatory, if the libbrotli library is installed, drogon will support brotli compression when sending HTTP responses;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>boost, the version should be no less than 1.61, is required only if the C++ compiler does not support C++ 17.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>the client development libraries of postgreSQL, mariadb and sqlite3, not mandatory, if one or more of them is installed, drogon will support access to the according database.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>gtest, not mandatory, if the gtest library is installed, the unit tests can be compiled.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
        <section ids="system-preparation-examples" names="system\ preparation\ examples">
            <title>System Preparation Examples</title>
            <section ids="ubuntu-18-04" names="ubuntu\ 18.04">
                <title>Ubuntu 18.04</title>
                <paragraph>Environment</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">sudo apt install git
sudo apt install gcc
sudo apt install g++
sudo apt install cmake</literal_block>
                <paragraph>jsoncpp</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">sudo apt install libjsoncpp-dev</literal_block>
                <paragraph>uuid</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">sudo apt install uuid-dev</literal_block>
                <paragraph>OpenSSL</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">sudo apt install openssl
sudo apt install libssl-dev</literal_block>
                <paragraph>zlib</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">sudo apt install zlib1g-dev</literal_block>
            </section>
            <section ids="centos-7-5" names="centos\ 7.5">
                <title>CentOS 7.5</title>
                <paragraph>Environment</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">yum install git
yum install gcc
yum install gcc-c++</literal_block>
                <paragraph>The default installed cmake version is too low, use source installation</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">git clone https://github.com/Kitware/CMake
cd CMake/
./bootstrap &amp;&amp; make &amp;&amp; make install</literal_block>
                <paragraph>Upgrade gcc</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">yum install centos-release-scl
yum install devtoolset-8
scl enable devtoolset-8 bash</literal_block>
                <note>
                    <paragraph>Note: Command scl enable devtoolset-8 bash only activate the new gcc temporarily until the session is end. If you want to always use the new gcc, you could run command <emphasis>echo “scl enable devtoolset-8 bash” &gt;&gt; ~/.bash_profile</emphasis>, system will automatically activate the new gcc after restarting.</paragraph>
                </note>
                <paragraph>jsoncpp</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">git clone https://github.com/open-source-parsers/jsoncpp
cd jsoncpp/
mkdir build
cd build
cmake ..
make &amp;&amp; make install</literal_block>
                <paragraph>uuid</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">yum install libuuid-devel</literal_block>
                <paragraph>OpenSSL</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">yum install openssl-devel</literal_block>
                <paragraph>zlib</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">yum install zlib-devel</literal_block>
            </section>
        </section>
        <section ids="database-environment" names="database\ environment">
            <title>Database Environment</title>
            <note>
                <paragraph>Note: These libraries below are not mandatory. You could choose to install one or more database according to your actual needs.</paragraph>
            </note>
            <note>
                <paragraph>Note: If you want to develop you webapp with database, please install the database develop environment first, then install drogon, otherwise you will encounter a <emphasis>NO DATABASE FOUND</emphasis> issue.</paragraph>
            </note>
            <section ids="postgresql" names="postgresql">
                <title>PostgreSQL</title>
                <paragraph>PostgreSQL’s native C library libpq needs to be installed. The installation is as follows:</paragraph>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>ubuntu 16: sudo apt-get install postgresql-server-dev-all</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>ubuntu 18: sudo apt-get install postgresql-all</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>centOS 7: yum install postgresql-devel</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>MacOS: brew install postgresql</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="mysql" names="mysql">
                <title>MySQL</title>
                <paragraph>MySQL’s native library does not support asynchronous read and write. Fortunately, MySQL also has a version of MariaDB maintained by the original developer community. This version is compatible with MySQL, and its development library supports asynchronous read and write. Therefore, Drogon uses the MariaDB development library to provide the right MySQL support, as a best practice，your operating system shouldn’t install both Mysql and MariaDB at the same time.</paragraph>
                <paragraph>MariaDB installation is as follows：</paragraph>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>ubuntu: sudo apt install libmariadbclient-dev</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>centOS 7: yum install mariadb-devel</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>MacOS: brew install mariadb</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="sqlite3" names="sqlite3">
                <title>Sqlite3</title>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>ubuntu: sudo apt-get install libsqlite3-dev</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>centOS: yum install sqlite-devel</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>MacOS: brew install sqlite3</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
                <note>
                    <paragraph>Note: Some of the above commands only install the development library. If you want to install a server also, please use Google search yourself.</paragraph>
                </note>
            </section>
        </section>
        <section ids="drogon-installation" names="drogon\ installation">
            <title>Drogon installation</title>
            <paragraph>Assuming that the above environment and library dependencies are all ready, the installation process is very simple;</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">cd $WORK_PATH
git clone https://github.com/an-tao/drogon
cd drogon
git submodule update --init
mkdir build
cd build
cmake ..
make &amp;&amp; sudo make install</literal_block>
            <paragraph>The default is to compile the debug version. If you want to compile the release version, the cmake command should take the following parameters:</paragraph>
            <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">cmake -DCMAKE_BUILD_TYPE=Release ..</literal_block>
            <paragraph>After the installation is complete, the following files will be installed in the system（One can change the installation location with the CMAKE_INSTALL_PREFIX option）:</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The header file of drogon is installed into /usr/local/include/drogon;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The drogon library file libdrogon.a is installed into /usr/local/lib;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Drogon’s command line tool drogon_ctl is installed into /usr/local/bin;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The trantor header file is installed into /usr/local/include/trantor;</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The trantor library file libtrantor.a is installed into /usr/local/lib;</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <section ids="include-drogon-source-code-locally" names="include\ drogon\ source\ code\ locally">
                <title>Include drogon source code locally</title>
                <paragraph>Of course, you can also include the drogon source in your project. Suppose you put the drogon under the third_party of your project directory (don’t forget to update submodule in the drogon source directory). Then, you only need to add the following two lines to your project’s cmake file:</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">add_subdirectory(third_party/drogon)
target_link_libraries(${PROJECT_NAME} PRIVATE drogon)</literal_block>
            </section>
            <section ids="use-vcpkg" names="use\ vcpkg">
                <title>Use vcpkg</title>
                <paragraph>The easiest way to install drogon on windows is to use vcpkg</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">vcpkg.exe install drogon</literal_block>
                <paragraph>Or</paragraph>
                <literal_block highlight_args="{}" language="bash" linenos="False" xml:space="preserve">vcpkg.exe install drogon:x64-windows</literal_block>
            </section>
            <section ids="use-docker-image" names="use\ docker\ image">
                <title>Use Docker Image</title>
                <paragraph>We also provide a pre-build docker image on the <reference name="docker hub" refuri="https://hub.docker.com/r/drogonframework/drogon">docker hub</reference><target ids="docker-hub" names="docker\ hub" refuri="https://hub.docker.com/r/drogonframework/drogon"></target> . All dependencies of Drogon and Drogon itself are already installed in the docker environment, where users can build Drogon-based applications directly.</paragraph>
            </section>
        </section>
    </section>
</document>
