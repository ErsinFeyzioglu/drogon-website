<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="C:\Users\86175\.github\drogon-all\drogon_web_community\drogon-website\docs\source\Coz-en.rstd">
    <section ids="coz" names="coz">
        <title>Coz</title>
        <section ids="causal-profiling-with-coz" names="causal\ profiling\ with\ coz">
            <title>Causal profiling with coz</title>
            <paragraph>With coz you can profile two things:</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>throughput</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>latency</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <paragraph>If you want to profile throughput of your application, you should switch on the <emphasis>COZ_PROFILING</emphasis> cmake option and include debug information in your exectuable with <emphasis>Debug</emphasis> or <emphasis>RelWithDebInfo</emphasis> release modes in cmake. Doing so will include coz progress points when serving a request. Profiling latency is currently not supported in whole application scope, but can still be done in user code.</paragraph>
            <paragraph>When you’re done compiling you application with progress points included. You need to run the executable with the coz profiler, for example <emphasis>coz run — [path to your executable]</emphasis>.</paragraph>
            <paragraph>Lastly, the application needs to be stressed, for best results you need to stress all code paths and run the profile for a good amount of time, 15+ min.</paragraph>
            <paragraph>The final profile will be a <emphasis>profile.coz</emphasis> file created in the current working directory. To view results, open the profile in the official <reference name="viewer" refuri="https://plasma-umass.org/coz/">viewer</reference><target ids="viewer" names="viewer" refuri="https://plasma-umass.org/coz/"></target> , or you could run a local copy from the official <reference name="git repo" refuri="https://github.com/plasma-umass/coz">git repo</reference><target ids="git-repo" names="git\ repo" refuri="https://github.com/plasma-umass/coz"></target> .</paragraph>
            <paragraph>Coz also supports scoping source files included for the profile with –source-scope &lt;pattern&gt; or -s &lt;pattern&gt; among other things, that should prove useful.</paragraph>
            <paragraph>For more information checkout:</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>coz run –help</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Git repo" refuri="https://github.com/plasma-umass/coz">Git repo</reference><target dupnames="git\ repo" ids="id1" refuri="https://github.com/plasma-umass/coz"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="Coz whitepaper" refuri="https://github.com/plasma-umass/coz">Coz whitepaper</reference><target ids="coz-whitepaper" names="coz\ whitepaper" refuri="https://github.com/plasma-umass/coz"></target></paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
        </section>
    </section>
</document>
