# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, an-tao
# This file is distributed under the same license as the drogon package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: drogon \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-19 19:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/Controller-HttpController-en.rstd:3
msgid "Controller HttpController"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:7
msgid "Generation"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:9
msgid "You can use the *drogon_ctl* command line tool to quickly generate custum controller class source files based on *HttpController*, the command format is as bellow:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:15
msgid "We create one controller class named *User*, under namespace *demo v1*:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:21
msgid "As you can see, two files have been added to the current directory, demo_v1_User.h and demo_v1_User.cc."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:23
#: ../../source/Controller-HttpController-en.rstd:61
msgid "demo_v1_User.h is as follows:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:25
#: ../../source/Controller-HttpController-en.rstd:63
msgid "*demo_v1_User.h*"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:46
#: ../../source/Controller-HttpController-en.rstd:94
msgid "demo_v1_User.cc is as follows:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:48
#: ../../source/Controller-HttpController-en.rstd:96
msgid "*demo_v1_User.cc*"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:57
msgid "Usage"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:59
msgid "Let's edit the two files:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:135
msgid "Each *HttpController* class can define many Http request handlers. Since the number of functions can be arbitrarily large, it is unrealistic to overload them with virtual functions. We need to register the handler itself (not the class) in the framework."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:137
msgid "The mapping from the URL path to the handler is done by macros. You can add a multipath map with the *METHOD_ADD* macro or the *ADD_METHOD_TO* macro. All *METHOD_ADD* and *ADD_METHOD_TO* statements should be sandwiched between the *METHOD_LIST_BEGIN* and *METHOD_LIST_END* macro statements."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:139
msgid "The *METHOD_ADD* macro automatically prefixes the namespace and class name in the path map. Therefore, in this example, the login function is registered to the */demo/v1/user/token* path, and the getInfo function is registered to the */demo/v1/user/xxx/info* path. Constraints are similar to the *PATH_ADD* macro of HttpSimpleController and not be described here."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:141
msgid "The *ADD_METHOD_TO* macro acts almost as much as the former, except that it does not automatically add any prefixes, i.e. the path registered by the macro is an absolute path."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:143
msgid "We see that *HttpController* provides a more flexible path mapping mechanism, we can put a class of functions in a class."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:145
msgid "In addition, you can see that the macros provide a method for parameters mapping. We can map the parameters on the path to the parameter list of the function. The number of URL path parameter corresponds to the function parameter's position, this is very convenient. The common types which can be converted by string type all can be used as function parameters (such as std::string, int, float, double, etc.), the drogon framework will automatically help you convert the type, this is very convenient for developing. Note that lvalue references must be of type const."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:147
msgid "The same path can be mapped multiple times, distinguished from each other by Http Method, which is legal and is a common practice of the Restful API, such as:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:157
msgid "When you use the *ADD_METHOD* macro and the class belongs to some namespace, you should add namespace to the access url, in this example, use *http://localhost/demo/v1/user/token?userid=xxx&passwd=xxx* or *http://localhost/demo/v1/user/xxxxx/info?token=xxxx* to access."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:159
msgid "The placeholders of path parameters can be written in several ways:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:161
msgid "{}: The position on the path is the position of the function parameter, which indicates that the path parameter maps to the corresponding position of the handler parameters."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:162
msgid "{1},{2}: The path parameters with a number in are mapped to the handler parameters specified by the number."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:163
msgid "{anystring}: Strings here have no practical effect, but can improve the readability of the program, equivalent to {}."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:164
msgid "{1:anystring},{2:xxx}: The number before the colon represents the position, and the string behind it does not actually work, but can improve the readability of the program, which is equivalent to the {1} and {2}."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:166
msgid "The latter two writes are recommended, and if the path parameters and function parameters are in the same order, the third is enough. It is easy to know that the following writes are equivalent:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:168
msgid "\"/users/{}/books/{}\""
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:169
msgid "\"/users/{}/books/{2}\""
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:170
msgid "\"/users/{user_id}/books/{book_id}\""
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:171
msgid "\"/users/{1:user_id}/books/{2}\""
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:174
msgid "Note: Path matching is not case sensitive, parameter names are case sensitive, (Parameter values ​​can be mixed in uppercase and lowercase and passed unchanged to the controller)"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:178
msgid "Parameters mapping"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:180
msgid "Through the previous description, we know that the parameters on the path and the query parameters after the question mark can be mapped to the parameter list of the handler function. The type of the target parameter needs to meet the following conditions:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:182
msgid "Must be one of a value type, a constant left value reference, or a non-const right value reference. It cannot be a non-const lvalue reference. It is recommended to use an rvalue reference so that the user can dispose of it at will;"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:184
msgid "Basic types such as int, long, long long, unsigned long, unsigned long long, float, double, long double, etc can be used as parameter types;"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:186
msgid "std::string；"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:188
msgid "Any type that can be assigned using the *stringstream >>* operator;"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:190
msgid "*In addition, the drogon framework also provides a mapping mechanism from the HttpRequestPtr object to any type of parameter*. When the number of mapping parameters in your handler parameter list is more than the parameters on the path, the extra parameters will be converted by the HttpRequestPtr object. The user can define any type of conversion, the way to define this conversion is to specialize the *fromRequest* template (which is defined in the HttpRequest.h header file) in the drogon namespace, for example, say we need to make a RESTful interface to create a new user, we define the user's structure as follows:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:192
msgid "*myapp_User_drogon.cc*"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:220
msgid "With the above definition and template specialization, we can define the path map and handler as follows:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:222
#: ../../source/Controller-HttpController-en.rstd:242
msgid "*UserController.cc*"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:238
msgid "It can be seen that the third parameter of *myapp::User* type has no corresponding placeholder on the mapping path, and the framework regards it as a parameter converted from the *req* object, and obtains this parameter through the user-specialized function template. This is very convenient for users."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:240
msgid "Further, some users do not need to access the HttpRequestPtr object except for their custom type data, so he can put the custom object in the position of the first parameter, and the framework can also correctly complete the mapping, such as the above example. It can also be written as follows:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:259
msgid "multiple path mapping"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:261
msgid "Drogon supports the use of regular expressions in path mapping, which can be used outside the '{}' curly brackets, for example:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:263
msgid "ADD_METHOD_TO(UserController::handler1,\"/users/.*\",Post); /// Match any path prefixed with `/users/` ADD_METHOD_TO(UserController::handler2,\"/{name}/[0-9]+\",Post); ///Match any path composed with a name string and a number."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:268
msgid "Regular expression"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:270
msgid "The above method has limited support for regular expressions. If users want to use regular expressions freely, drogon provides the *ADD_METHOD_VIA_REGEX* macro to achieve this, such as:"
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:278
msgid "As can be seen, parameter mapping can also be done using regular expressions, and all strings matched by subexpressions will be mapped to the parameters of the handler in order."
msgstr ""

#: ../../source/Controller-HttpController-en.rstd:281
msgid "It should be noted that when using regular expressions, you should pay attention to matching conflicts (multiple different handlers are matched). When conflicts happen in the same controller, drogon will only execute the first handler (the one registered in the framework first). When conflicts happen between different controllers, which handler to be executed is uncertain. Therefore, users need to avoid this kind of conflicts."
msgstr ""

